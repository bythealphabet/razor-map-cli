import { promisify } from 'util';
import stream from 'stream';

// Create a utility function to convert a stream to a promise
const streamToPromise = (input: stream.Readable): Promise<string> => {
    const chunks: any[] = [];
    return new Promise((resolve, reject) => {
        input.on('data', chunk => chunks.push(chunk));
        input.on('error', reject);
        input.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));
    });
};

async function processFile(filePath: string): Promise<[string, string[]]> {
    const fileName = path.basename(filePath);

    const fileStream = fs.createReadStream(filePath, { encoding: 'utf-8' });
    const fileContent = await streamToPromise(fileStream);
    const partials = findPartials(fileContent);

    return [fileName, partials];
}

async function main(): Promise<void> {
    const folderPath = path.join('..', argv.folder);

    const razorFiles = findFiles(folderPath, '.cshtml');
    const partialMap: Record<string, string[]> = {};

    for (const filePath of razorFiles) {
        const [fileName, partials] = await processFile(filePath);
        if (partials.length > 0) {
            partialMap[fileName] = partials;
        }
    }

    for (const [view, partials] of Object.entries(partialMap)) {
        console.log(`${view}:`);
        for (const partial of partials) {
            console.log(`  -> ${partial}`);
        }
    }
}
