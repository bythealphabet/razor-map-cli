
"use strict";
import util from "util";
import path from "path";
import fs from "fs";
import { Transform } from "stream";
import minimist from "minimist";
import getStdin from "get-stdin";
import CAF from "caf";

const args = minimist(process.argv.slice(2), {
  boolean: ["help", "in", "out", "compress", "uncompressed"],
  string: ["file"]
});

const BASE_PATH = path.resolve(process.env.BASE_PATH || __dirname);
const OUTFILE = path.join(BASE_PATH, "out.txt");

async function main() {
  if (args.help) {
    printHelp();
  }  else if (args.file) {
    let stream = fs.createReadStream(path.join(BASE_PATH, args.file));
    processFile(stream);
  } else {
    error("Incorrect usage.", true);
  }
}

//************************* */

function processFile(inStream: Transform) {
  let outStream = inStream;

  if (args.uncompress) {
    // let gunzipStream = zlib.createGunzip();
    // outStream = outStream.pipe(gunzipStream);
  }

  let upperStream = new Transform({
    transform(chunk, enc, cb) {
      this.push(chunk.toString().toUpperCase());
      cb();
    }
  });

  outStream = outStream.pipe(upperStream);
  let targetStream;
  if (args.out) {
    targetStream = process.stdout;
  } else {
    targetStream = fs.createWriteStream(OUTFILE);
  }
  outStream.pipe(targetStream);
}

function error(msg, includeHelp = false) {
  console.error(msg);

  if (includeHelp) {
    console.log("");
    printHelp();
  }
}

function printHelp() {
  console.log("ex1 usage:");
  console.log("   ex1.js --file={FILENAME}");
  console.log("");
  console.log("--help                     print this help");
  console.log("--file={FILENAME}          process the file");
  console.log("--in, -                    process stdin");
  console.log("--out                      process to stdout");
  console.log("--compress                 gzip the output");
  console.log("--uncompress               un-gzip the input");
  console.log("");
}
